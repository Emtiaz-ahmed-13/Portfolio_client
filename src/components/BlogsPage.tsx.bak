"use client";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { useAppDispatch, useAppSelector } from "@/lib/redux/hooks";
import { Blog, fetchBlogs } from "@/lib/redux/slices/blogsSlice";
import { setConnectionStatus } from "@/lib/redux/slices/uiSlice";
import { RootState } from "@/lib/redux/store";
import { PlusCircle } from "lucide-react";
import Image from "next/image";
import Link from "next/link";
import { useEffect } from "react";

export default function BlogsClientPage() {
  const dispatch = useAppDispatch();
  const {
    data: blogs,
    loading,
    error,
  } = useAppSelector((state: RootState) => state.blogs);
  const connectionStatus = useAppSelector(
    (state: RootState) => state.ui.connectionStatus
  );

  useEffect(() => {
    // Fetch blogs when the component mounts
    const fetchData = async () => {
      try {
        await dispatch(fetchBlogs()).unwrap();
        dispatch(
          setConnectionStatus({
            status: "connected",
            message: "Connected to backend successfully",
          })
        );
      } catch (err) {
        console.error("Error fetching blogs:", err);
        dispatch(
          setConnectionStatus({
            status: "warning",
            message: "Using demo content (could not connect to backend)",
          })
        );
      }
    };

    fetchData();
  }, [dispatch]);

  if (loading) {
    return (
      <div className="container mx-auto py-12 px-4 text-center">
        <p>Loading blogs...</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        {/* Status Banner - Only show if status is not success */}
        {connectionStatus.status !== "connected" && (
          <div
            className={`w-full px-4 py-3 mb-6 text-sm rounded-md ${
              connectionStatus.status === "disconnected"
                ? "bg-red-500/10 text-red-700 dark:text-red-300"
                : "bg-yellow-500/10 text-yellow-700 dark:text-yellow-300"
            }`}
          >
            {connectionStatus.message}
          </div>
        )}

        <div className="mb-12 flex justify-between items-center">
          <div>
            <h1 className="text-4xl font-bold tracking-tight text-primary mb-2">
              Blog
            </h1>
            <p className="text-xl text-muted-foreground">
              Thoughts, ideas, and guides on web development
            </p>
          </div>
          <Link href="/blogs/create">
            <Button className="flex items-center gap-2">
              <PlusCircle size={16} />
              Create New Blog
            </Button>
          </Link>
        </div>

        {error && (
          <div className="bg-red-500/10 text-red-700 dark:text-red-300 p-4 rounded-md mb-6">
            {error}
          </div>
        )}

        <div className="grid gap-8">
          {blogs.length === 0 && !loading && (
            <div className="text-center py-12">
              <p className="text-muted-foreground mb-4">No blog posts yet.</p>
              <Link href="/blogs/create">
                <Button>Create Your First Blog</Button>
              </Link>
            </div>
          )}

          {blogs.map((blog: Blog) => (
            <Card key={blog._id} className="overflow-hidden">
              <div className="grid md:grid-cols-3 gap-4">
                {blog.coverImage && (
                  <div className="relative h-48 md:h-full">
                    <Image
                      src={blog.coverImage}
                      alt={blog.title}
                      className="object-cover"
                      fill
                    />
                  </div>
                )}
                <div className={blog.coverImage ? "md:col-span-2 p-6" : "p-6"}>
                  <CardHeader className="p-0 mb-2">
                    <div className="flex items-center gap-2 mb-2 text-sm">
                      <span className="text-muted-foreground">
                        {new Date(blog.createdAt).toLocaleDateString("en-US", {
                          year: "numeric",
                          month: "long",
                          day: "numeric",
                        })}
                      </span>
                      {blog.tags && blog.tags.length > 0 && (
                        <>
                          <span className="text-muted-foreground">â€¢</span>
                          <span className="text-primary">{blog.tags[0]}</span>
                        </>
                      )}
                    </div>
                    <CardTitle className="text-2xl mb-2">
                      <Link
                        href={`/blogs/${blog._id}`}
                        className="hover:underline"
                      >
                        {blog.title}
                      </Link>
                    </CardTitle>
                    <CardDescription className="text-base">
                      {blog.summary ||
                        blog.content
                          .substring(0, 120)
                          .replace(/<\/?[^>]+(>|$)/g, "") + "..."}
                    </CardDescription>
                  </CardHeader>
                  <CardFooter className="p-0 mt-4">
                    <Link href={`/blogs/${blog._id}`} passHref>
                      <Button variant="outline">Read More</Button>
                    </Link>
                  </CardFooter>
                </div>
              </div>
            </Card>
          ))}
        </div>
      </div>
    </div>
  );
}
